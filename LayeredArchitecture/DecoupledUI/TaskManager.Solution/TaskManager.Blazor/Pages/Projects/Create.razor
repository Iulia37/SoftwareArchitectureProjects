@page "/projects/create/{userId:int}"
@inject ProjectService ProjectService
@inject NavigationManager NavigationManager
@using TaskManager.DTO.Models
@using System.ComponentModel.DataAnnotations

<h1 class="mb-4 text-center">Create a new project</h1>

@if (validationMessages?.Count > 0)
{
    <div class="alert alert-danger">
        @foreach (var e in validationMessages)
        {
            <div>@e</div>
        }
    </div>
}

<EditForm Model="@project" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <input type="hidden" @bind="project.Id" />
    <input type="hidden" @bind="project.UserId" />

    <div class="mb-3">
        <label class="form-label fw-bold">Name:</label>
        <InputText @bind-Value="project.Name" class="form-control" placeholder="Project name" />
        <ValidationMessage For="@(() => project.Name)" />
    </div>

    <div class="mb-3">
        <label class="form-label fw-bold">Description:</label>
        <InputText @bind-Value="project.Description" class="form-control" placeholder="Project description" />
        <ValidationMessage For="@(() => project.Description)" />
    </div>

    <div class="mb-3">
        <label class="form-label fw-bold">Deadline:</label>
        <InputDate @bind-Value="project.Deadline" class="form-control" />
        <ValidationMessage For="@(() => project.Deadline)" />
    </div>

    <button class="btn alert-info w-100 mt-3" type="submit">
        <i class="bi bi-pencil-square"></i> Create
    </button>
</EditForm>

@code {
    [Parameter] public int userId { get; set; }
    ProjectDTO project = new();
    string error;
    List<string> validationMessages = new();

    protected override void OnInitialized()
    {
        project.UserId = userId;
    }

    async Task HandleValidSubmit()
    {
        validationMessages.Clear();
        try
        {
            var created = await ProjectService.CreateProjectAsync(project);
            NavigationManager.NavigateTo($"/projects/{created.Id}");
        }
        catch (ApplicationException ex)
        {
            try
            {
                using var doc = System.Text.Json.JsonDocument.Parse(ex.Message);
                if (doc.RootElement.TryGetProperty("errors", out var errorsProp))
                {
                    foreach (var property in errorsProp.EnumerateObject())
                    {
                        foreach (var err in property.Value.EnumerateArray())
                        {
                            validationMessages.Add(err.GetString());
                        }
                    }
                }
                else
                {
                    validationMessages.Add(ex.Message);
                }
            }
            catch
            {
                validationMessages.Add(ex.Message);
            }
        }
        catch (Exception ex)
        {
            validationMessages.Add(ex.Message);
        }
    }
}